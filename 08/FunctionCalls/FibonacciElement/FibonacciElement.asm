@256
D=A
@SP
M=D
// call Sys.init
@RETURN-ADDRESS-9cb60e60-de23-11ea-8812-b2d4fa5bb679
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURN-ADDRESS-9cb60e60-de23-11ea-8812-b2d4fa5bb679)
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
@0
D=A
@ARG
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt                     // checks if n<2
@SP
A=M-1
D=M
A=A-1
M=M-D
D=M
@SP
M=M-1
@LT-9cb68390-de23-11ea-85dd-8fccaa36d201
D;JLT
@SP
A=M-1
M=0
@AFTERLT-9cb68390-de23-11ea-85dd-8fccaa36d201
0;JMP
(LT-9cb68390-de23-11ea-85dd-8fccaa36d201)
@SP
A=M-1
M=-1
(AFTERLT-9cb68390-de23-11ea-85dd-8fccaa36d201)
// if-goto IF_TRUE
@SP
A=M-1
D=M
@SP
M=M-1
@IF_TRUE
D;JNE
// goto IF_FALSE
@IF_FALSE
0;JMP
// label IF_TRUE          // if n<2, return n
(IF_TRUE)
// push argument 0
@0
D=A
@ARG
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@5
D=D-A
A=D
D=M
@14
M=D
@ARG
A=M
D=A
@13
M=D
@SP
A=M-1
D=M
@13
A=M
M=D
@SP
M=M-1
@ARG
D=M+1
@SP
M=D
@LCL
A=M-1
D=M
@THAT
M=D
@LCL
D=M
@2
A=D-A
D=M
@THIS
M=D
@LCL
D=M
@3
A=D-A
D=M
@ARG
M=D
@LCL
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// label IF_FALSE         // if n>=2, returns fib(n-2)+fib(n-1)
(IF_FALSE)
// push argument 0
@0
D=A
@ARG
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
// call Main.fibonacci 1  // computes fib(n-2)
@RETURN-ADDRESS-9cb746e0-de23-11ea-8e5b-c97779eea3a4
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN-ADDRESS-9cb746e0-de23-11ea-8e5b-c97779eea3a4)
// push argument 0
@0
D=A
@ARG
D=D+M
A=D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
A=M-1
D=M
A=A-1
M=M-D
@SP
M=M-1
// call Main.fibonacci 1  // computes fib(n-1)
@RETURN-ADDRESS-9cb76df0-de23-11ea-82dd-268d718da8d8
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN-ADDRESS-9cb76df0-de23-11ea-82dd-268d718da8d8)
// add                    // returns fib(n-1) + fib(n-2)
@SP
A=M-1
D=M
A=A-1
M=M+D
@SP
M=M-1
// return
@LCL
D=M
@5
D=D-A
A=D
D=M
@14
M=D
@ARG
A=M
D=A
@13
M=D
@SP
A=M-1
D=M
@13
A=M
M=D
@SP
M=M-1
@ARG
D=M+1
@SP
M=D
@LCL
A=M-1
D=M
@THAT
M=D
@LCL
D=M
@2
A=D-A
D=M
@THIS
M=D
@LCL
D=M
@3
A=D-A
D=M
@ARG
M=D
@LCL
D=M
@4
A=D-A
D=M
@LCL
M=D
@14
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1   // computes the 4'th fibonacci element
@RETURN-ADDRESS-9cb7bc10-de23-11ea-80b1-59d5891ba8f2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN-ADDRESS-9cb7bc10-de23-11ea-80b1-59d5891ba8f2)
// label WHILE
(WHILE)
// goto WHILE              // loops infinitely
@WHILE
0;JMP
(WHILE)
@WHILE
0;JMP